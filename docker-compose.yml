version: '3'

services:
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"  # RabbitMQ default port
      - "15672:15672"  # RabbitMQ management UI port
    environment:
      RABBITMQ_DEFAULT_USER: 'guest'
      RABBITMQ_DEFAULT_PASS: 'guest'
    networks:
      - api_network
  
  postgres_users:
    build:
      context: .
      dockerfile: ./Dockerfile
    restart: always
    ports:
      - "5433:5433"
    environment:
      POSTGRES_DB: RackUsers
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_HOST_AUTH_METHOD: 'trust'  # Trust all connections
    volumes:
      - ./RackUsers.sql:/docker-entrypoint-initdb.d/init.sql  # Mount initialization script for RackChats database
    networks:
      - api_network
  
  postgres_chats:    
    build:
     context: .
     dockerfile: ./Dockerfile
    restart: always
    ports:
      - "5434:5433"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: RackChats
      POSTGRES_HOST_AUTH_METHOD: 'trust'  # Trust all connections
    volumes:
      - ./RackChats.sql:/docker-entrypoint-initdb.d/init.sql  # Mount initialization script for RackChats database
    networks:
      - api_network
  
  rackapi:
    build:
      context: .
      dockerfile: ./RackApi/Dockerfile
    ports:
      - "5283:80"
    depends_on:
      - rabbitmq
      - postgres_users
      - postgres_chats
    volumes:
      - ./RackApi/ocelot.json:/app/ocelot.json
    networks:
      - api_network

  message:
    build:
      context: .
      dockerfile: ./RackApi.Chat/Dockerfile
    ports:
      - "5012:80"
    depends_on:
      - rabbitmq
      - postgres_chats
    networks:
      - api_network

  user:
    build:
      context: .
      dockerfile: ./RackApi.User/Dockerfile
    ports:
      - "5114:80"
    depends_on:
      - rabbitmq
      - postgres_users
    networks:
      - api_network

networks:
  api_network:
    driver: bridge